apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.lvshou.pxy"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //配置dimension
        flavorDimensions "pack"
        //占位符
        manifestPlaceholders = [UMENG_CHANNEL: "example"]
        //NDK的配置 arm64-v8a
        ndk { abiFilters "armeabi", "armeabi-v7a", "x86", "mips" }
    }

/*多渠道的一些配置 */
//关于多渠道打包的另一种配置可以参考另一篇文章：https://www.jianshu.com/p/332525b09a88
    productFlavors {
        tencent {
            applicationId "com.example.administrator.tcsharefood"
            dimension "pack"
            manifestPlaceholders = [appName: "tencent"]
        }
        baidu {
            applicationId "com.example.administrator.bdsharefood"
            dimension "pack"
            manifestPlaceholders = [appName: "baidu"]
        }
    }

//签名文件配置: 这是第一种写法：
/*    signingConfigs {
        debug {
            storeFile file('../sharepack.jks')
            storePassword "123456"
            keyAlias "sharepack"
            keyPassword "123456"
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            storeFile file('../sharepack.jks')
            storePassword "123456"
            keyAlias "sharepack"
            keyPassword "123456"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }*/
//  这是签名的第二种写法  调用getSigningProperties方法里面的函数,
//  通过读取里面的配置文件进行操作：
    signingConfigs {
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            storeFile
            storePassword
            keyAlias
            keyPassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    getSigningProperties()

//自定义输出包名的设置
    applicationVariants.all { variant ->
        variant.outputs.all {
            // 输出apk名称为sharev1.0_tencent.apk
            def fileName = "share${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
            outputFileName = fileName
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true  //启用debug的buildType配置
        }
        //输出类型
        applicationVariants.all {
            //判断是release还是debug版本
            def buildType = it.buildType.name
            //获取当前时间的"YYYY-MM-dd"格式。
            def createTime = new Date().format("YYYY-MM-dd", TimeZone.getTimeZone("GMT+08:00"))
            //如果是正式包,将其输入到指定文件夹
            if (buildType == "release") {
                it.getPackageApplication().outputDirectory = new File('D:\\out_apk' + "/${it.productFlavors[0].applicationId}/${createTime}")
            }
        }
    }

}

//读取签名配置文件
def getSigningProperties() {

    def propFile = file('signing.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }
}

//获取版本号：
def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        def runTasks = gradle.startParameter.taskNames
        //仅在assembleRelease任务是增加版本号
        if ('assembleRelease' in runTasks) {
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

//获取当前时间
def getCurrentTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:design:$support_version"
    implementation "com.android.support:cardview-v7:$support_version"
    implementation "com.android.support:support-vector-drawable:$support_version"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation "com.android.support:support-v4:$support_version"
    implementation "com.android.support:recyclerview-v7:$recycleview_version"
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "com.android.support.test:runner:$test_runner_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$test_espresso_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2_converter_gson_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-experimental-adapter:$retrofit2_converter_kotlin_coroutines_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_logging_version"
    //一个强大的recycleView适配器封装库
    implementation "com.github.CymChad:BaseRecyclerViewAdapterHelper:$brvah_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    //AgentWeb 是一个高度封装的 Android WebView
    implementation "com.just.agentweb:agentweb:$agentweb_version"
    //沉浸式状态栏
    implementation "com.gyf.barlibrary:barlibrary:$barlibrary_version"

    implementation "com.google.android:flexbox:$flexbox_version"

//    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
//    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version"

    //引入rxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    //调试数据库工具  https://github.com/amitshekhariitbhu/Android-Debug-Database
//    debugImplementation 'com.amitshekhar.android:debug-db:1.0.4'

    //一款功能齐全的客户端（iOS、Android）研发助手，你值得拥有。  https://github.com/didi/DoraemonKit.git
    //    只在Debug环境中进行集成，不要带到线上。有一些hook操作会污染线上代码
//    debugImplementation 'com.didichuxing.doraemonkit:doraemonkit:1.0.1'

}
kotlin {
    experimental {
        coroutines "enable"
    }
}

task myTask {
    println "myTask invoked！"
}

configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:27.1.1'
}
